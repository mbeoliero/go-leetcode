mysql
redis
kafka
es

限流和熔断
页缓存、零拷贝、顺序写入、批量操作、全异步

指针逃逸、动态类型(interface、slice)、闭包逃逸、栈空间不足逃逸

ES：Term Index -> Term Dictionary -> Postion List
FST技术（图相关）、压缩技术（大数变小数）、联合索引使用跳表

Redis Hash/ZSet -> Listpack / (HashMap/Skiplist)

电子科大毕业，毕业去了虾皮，当时进去的时候 shopee其实处于一个高速发展的时期，积极扩展世界范围的业务
我所处的部门是O2O，产品线是数字产品，主要服务于东南亚七个国家的一些日常生活
支柱业务是账单和优惠卷，其他的还有电影票、演唱会票、黄金、捐款、ota机票等
其中自己是主要负责账单业务的维护，其他的电影票、优惠卷和黄金、捐款、ota类的都有做过

账单、优惠卷、电影票、演唱会票、黄金、捐款、ota机票、
家政服务、酒店、彩票

存储层：mysql、redis、es、kafka、cdn
网关层：client、browser、（api、admin、internal）
服务：商品中心、价格中心、订单中心、用户中心
商品中心：
同步服务 -> 同步数据、增量同步、全量同步，账单信息定时全量同步到es，消费binlog增量同步es
列表服务 -> es，列表服务、搜索服务，账单列表，账单多语言搜索，搜索纠错
商品服务 -> mysql、cdn、外部，商品管理、配置管理，账单管理存入db，配置管理存入db发布至cdn，对接外部查询账单信息
价格中心：
价格服务 -> mysql，价格管理、价格计算、手续费管理，商品价格管理审批后存入db，账单金额计算
订单中心：
订单服务 -> mysql，订单管理、支付、发货，包括订单创建、异步发货，订单创建、订单状态扭转、订单发货退货
邮件服务 -> 推送邮件服务
用户中心：
用户服务 -> mysql，用户管理，通过消费mq消息记录购买历史存入db

日订单量：百万级；大促订单量：千万级；大促零点浏览接口峰值qps：百万级
最有挑战的地方：对接上千种账单类型，采用统一化的方式接入
遇到的问题：RPC漏斗型超时时间（引入缓存机制）、Redis大key问题（多级缓存解决：单个翻译内容+语言 => 整个文件）、改造缓存框架（geohash算法）

改进点：
1. 统一模型
2. 前端搜索
3. 后端算价
4. 缓存升级


索引失效：
1. 联合索引最左匹配失效
2. 使用运算（字段加减、函数运算、类型转换）
3. like %开头
4. 不等于、not null、or操作

缓存雪崩：大量key失效，打到db，解决方案：随机过期时间、不过期
缓存击穿：热点数据过期，打到db，解决方案：互斥锁、不过期后台刷新
缓存穿透：既不在redis也不在db，解决方案：非法校验、拦截器、空值默认值

缓存延迟双删策略：
在线程 A 删除缓存、更新完数据库之后，先「休眠一会」，再「删除」一次缓存。
线程 A 可以生成一条「延时消息」，写到消息队列中，消费者延时「删除」缓存。

多泳道背景：
1. staging环境数据缺漏严重
2. 服务挂的情况较多
3. 测试环境跨版本需求

访问外部时候

先熟悉公司业务，在业务基础上磨练技术，磨练完后再拓宽自己的技术。

geohash key: 导致缓存框架不适配
印尼时区: 印尼三个时区买电影票，服务器时间计算
mysql泰文编码: 字符集默认是utf8mb4，单列排序规则为utf8_general_ci，修改单列编码为utf8_unicode_ci
utf8_unicode_ci的最主要的特色是支持扩展，即当把一个字母看作与其它字母组合相等时。例如，在德语和一些其它语言中‘ß'等于‘ss'。
utf8_general_ci是一个遗留的 校对规则，不支持扩展。它仅能够在字符之间进行逐个比较。这意味着utf8_general_ci校对规则进行的比较速度很快，但是与使用utf8_unicode_ci的 校对规则相比，比较正确性较差）。

protobuf oneof：下载文件，根据文件名识别
gin validate：proto文件添加tag、gin添加validator
多泳道外部访问存储map：访问外部时，tag丢失
golang format：团队协作，format凌乱问题
docker编译, goland remote：confluence kafka go导致的本地环境配置困难
多语言：1. 直接存储transfy key 2. 数据库存储_local字段 3. 单独拉一张表

select INTERVAL(speed,1000,2000,4000,8000) as i_s, sum(count)
from a_speed_table
groupby i_s

Znode 树形结构、ZAB协议、心跳检测、Watch机制
ZK选举：1. epoch(逻辑时钟，表示投票轮数) > zxid(此值越大表示数据越新) > myid(编号越大权重越大)
权衡伸缩性和高吞吐率，引入Observer，Observer不参与投票；Observers接受客户端的连接，并将写请求转发给leader节点

配置中心：灰度发布、版本管理&回滚、多环境多集群、格式校验、配置实时生效、权限管理

# popclip
  name: Easydict
  icon: search E
  key combo: shift control L

test code server

Moego 二面挂
伴伴 一面挂
minimax hr
klook 薪资太低
fuse 薪资太低+python
micro focus
Kong
Ones
flexport